name: Build & Push CPU/GPU Dev/Prod Images

on:
  push:
    branches: [ main ]
    tags: [ 'v*.*.*' ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE: ${{ github.repository }}

permissions:
  contents: read
  packages: write
  id-token: write
  attestations: write      # <— needed for attest-build-provenance

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        python: [ '3.10', '3.11', '3.12' ]
        extra:   [ cpu, cu124 ]
        mode:    [ dev, prod ]
        base:
          - debian:bullseye-slim
          - nvidia/cuda:12.9.0-cudnn-runtime-ubuntu24.04

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE }}
          tags: |
            type=raw,value=py${{ matrix.python }}-${{ matrix.extra }}-${{ matrix.mode }}
            type=raw,value=latest,enable=${{ matrix.python == '3.12' }}
            type=sha,format=short,prefix=sha-
            type=ref,event=tag

      - name: Build & Push
        id: build                           # <— add an id here
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/Dockerfile
          build-args: |
            BASE_IMAGE=${{ matrix.base }}
            PYTHON_VERSION=${{ matrix.python }}
            EXTRA=${{ matrix.extra }}
            MODE=${{ matrix.mode }}
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Attest Provenance
        if: success()
        uses: actions/attest-build-provenance@v1
        with:
          subject-name:   ${{ env.REGISTRY }}/${{ env.IMAGE }}
          subject-digest: ${{ steps.build.outputs.digest }}   
          push-to-registry: true
